// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  DONOR
  VOLUNTEER
  NEEDY
}

model User {
  id                  Int       @id @default(autoincrement())
  userEmail           String    @unique
  name                String
  password            String
  typeOfUser         UserType
  howManyDilsDone     Int?      // Optional: number of "dils" done
  eventsParticipated   Int?      // Optional: number of events participated
  donatedFood         Int?      // Optional: amount of food donated (you can change type based on your needs)
  donatedAmount       Float?    // Optional: total amount donated
}
model FoodDonate {
  id          Int       @id @default(autoincrement())
  organizationName String // Name of the organization
  pickup      Boolean    // Pickup instructions or location
  longitude   Float     // Longitude of the donor's location
  latitude    Float     // Latitude of the donor's location
  foodItems   FoodItem[] @relation // Relation to food items
  createdAt   DateTime  @default(now()) // Timestamp of the donation
}

model FoodItem {
  id          Int       @id @default(autoincrement())
  itemName    String    // Name of the food item (e.g., Rice, Wheat)
  quantityKg  Float     // Quantity in kilograms
  expiryDate  DateTime  // Expiry date of the food item
  ageGroup    AgeGroup  // Age group enum
  foodDonate  FoodDonate @relation(fields: [foodDonateId], references: [id])
  foodDonateId Int
}

enum AgeGroup {
  UNDER_SIX_MONTHS
  SIX_TO_TWELVE_MONTHS
  ONE_TO_THREE_YEARS
  FOUR_TO_SIX_YEARS
  SEVEN_TO_TWELVE_YEARS
  THIRTEEN_PLUS
}
